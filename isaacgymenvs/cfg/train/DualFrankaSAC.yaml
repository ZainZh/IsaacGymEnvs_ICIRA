params:
  seed: ${...seed}
  algo:
    name: sac   # main Runner: cql_agent.CQLAgent

  model:
    name: soft_actor_critic   # model_builder.ModelBuilder -> models.ModelSACContinuous

  network:
    name: soft_actor_critic  # model_builder.NetworkBuilder ->network_builder.SACBuilder
    separate: True    # True, use critic, critic_target

    space:
      continuous:
        # mu_activation: None
        # sigma_activation: None
        # mu_init:
        #   name: default
        # sigma_init:
        #   name: const_initializer
        #   val: 0
        fixed_sigma: False   # if fixed_sigma=True, config.sigma is used below

    mlp:
      units: [256, 128, 64]
      activation: relu   # network_builder activations_factory line 38
#      units: [256, 128, 64]
#      activation: elu   # network_builder activations_factory line 38
      d2rl: False

      initializer:    # network_builder init_factory line 50
        name: default   # default-identity
      # regularizer:    # seems useless
      #   name: None

    log_std_bounds: [-5, 2]   # default

  # load_checkpoint: ${if:${...checkpoint},True,False} # flag which sets whether to load the checkpoint
  # load_path: ${...checkpoint} # seem useless, path to the checkpoint to load

  config:
    name: ${resolve_default:DualFrankaSAC_0721_test2,${....experiment}}
    full_experiment_name: ${.name}
    load_checkpoint: ${if:${....checkpoint},True,False}
    # base_init
    # env_config:
    # env_info:
    num_actors: ${....task.env.numEnvs}
    env_name: rlgpu
    device: ${....rl_device}   # sac_device
    weight_decay:
    is_train: ${if:${....test},False,True}
    save_best_after: 40   # > epoch_num can save, if not set default 500
    print_stats: True   # print fps_step,fps_total
    max_epochs: ${resolve_default:30000,${....max_iterations}}   # can be overrided in main config
    reward_shaper:    # needed
      scale_value: 0.05
    games_to_track: 100   # game track if done
    actor_update_frequency: 1
    critic_target_update_frequency: 2

    # agent init
    num_seed_steps: 20 # first few epochs, random play
    # ? total steps: num_actors * num_steps_per_episode * num_seed_steps
    gamma: 0.96
    critic_tau: 0.005   # critic soft update tau
    batch_size: 2048
    init_alpha: 1   # inital log_alpha
    learnable_temperature: True   # learnable alpha, alpha_lr
    replay_buffer_size: 1000000 #2e18
    replay_buffer_path: ${....dataset}
    num_steps_per_episode: 1000
    normalize_input: True
    max_env_steps: 1000   # compare with current_lengths
    actor_lr: 5e-4    # policy lr, can set actor(/critic/alpha)_betas ,default=[0.9,0.999]
    critic_lr: 5e-4   # qf lr
    alpha_lr: 564e-3    # sac entropy tuning alpha
    target_entropy_coef: 0.1  # if none, default 0.5

    score_to_win: 400000
    sigma: 0.9    # need tune, if fixed_sigma=True

    # CQL args
    # max_q_backup: False   # not added
    # deterministic_backup: False
    # policy_eval_start: 40000    # same as num_seed_steps
    min_q_weight: 1.0
    min_q_version: 3  # choose cql(rho/H)
    with_lagrange: True
    lagrange_thresh: 5.0
    num_random : 10

    # env_config:
    #   name: HumanoidRun-v0
    #   flat_observation: True

    # mixed_precision: False
    # normalize_value: True
    # normalize_advantage: True
    # tau: 0.95
    # learning_rate: 5e-4
    # lr_schedule: adaptive
    # kl_threshold: 0.008   # used in a2c_common
    # save_frequency: 100
    # grad_norm: 1.0
    # entropy_coef: 0.0
    # truncate_grads: True
    # e_clip: 0.2
    # horizon_length: 16
    # minibatch_size: 8192
    # mini_epochs: 8
    # critic_coef: 4
    # clip_value: True
    # seq_len: 4
    # bounds_loss_coef: 0.0001






